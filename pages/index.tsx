import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { faFaceSmile, faUser } from '@fortawesome/free-solid-svg-icons'
import { faPlus } from '@fortawesome/free-solid-svg-icons'
import { faCircle } from '@fortawesome/free-solid-svg-icons'
import { faStar } from '@fortawesome/free-solid-svg-icons'
import { faTrash } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { useState } from 'react'
import { Fragment, useRef} from 'react'
import { Dialog, Transition } from '@headlessui/react'


const Home: NextPage = () => {


  interface TodoEvents {
    events: string[];
  }
  
  let [todoName, setTodoName] = useState("")
  let [event, setEvent] = useState<string[]>([])  
  let [todoEvents, setTodoEvents] =  useState<string[]>([])
  let [prioritizedEvents, setPrioritizedEvents] =  useState<string[]>([])
  let [showTodo, setShowTodo] = useState(false)
  let [show, setShow] = useState(false)

  let [friendName, setFriendName] = useState("")

  const [open, setOpen] = useState(true)
  const cancelButtonRef = useRef(null)


  const AddTodoEvent = async (e:any) => {
      e.preventDefault()
      if (e.target.todoName.value === "") {
        setShow(true)
        return
      }
      setTodoName(todoName = e.target.todoName.value)
      todoEvents.push(todoName)
      setShowTodo(true)
      e.target.reset()
  }
  const registerName = (e:any) => {
    e.preventDefault()
    setFriendName(e.target.friendName.value)  
    setOpen(false)
  }
  const deleteEvent = (indexNO:any, item:any) =>{
    console.log(indexNO,item);
    
   let filtered = todoEvents.filter((item,index )=>{
      return index !== indexNO
    })
    let filteredPrioritized = prioritizedEvents.filter((itemName, index)=>{
      console.log(itemName, item);
      return item !== itemName
    })

    console.log(filteredPrioritized);
    setPrioritizedEvents(prioritizedEvents = filteredPrioritized)
    console.log(prioritizedEvents);
    
    setTodoEvents(todoEvents = filtered);
    
    if (todoEvents.length === 0) {
      setShowTodo(false)
      setPrioritizedEvents([])
    }
  }

  const proritizeEvent = (indexNO:any, item:string) =>{
       
    if (prioritizedEvents.includes(item)) {
      return
    }
    event.push(todoEvents[indexNO]);
    setPrioritizedEvents(prioritizedEvents = event)
    console.log(prioritizedEvents);
  }
  return ( 
      <>
      <div className={styles.container}>
        <Head>
          <title>Todo List </title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Transition.Root show={open} as={Fragment}>
      <Dialog as="div" className="relative z-10" initialFocus={cancelButtonRef} onClose={setOpen}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
        </Transition.Child>

        <div className="fixed inset-0 z-10 overflow-y-auto">
          <div className="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
              enterTo="opacity-100 translate-y-0 sm:scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 translate-y-0 sm:scale-100"
              leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
            >
              <Dialog.Panel className="relative transform overflow-hidden flex flex-col justify-center rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                  <div className="sm:flex sm:items-start">
                    {/* <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                      <ExclamationTriangleIcon className="h-6 w-6 text-red-600" aria-hidden="true" />
                    </div> */}
                    <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                      <Dialog.Title as="h3" className="text-lg font-medium leading-6 text-gray-900">
                        Tell us your name
                      </Dialog.Title>
                      <div className="mt-2">
                        <p className="text-sm text-gray-500">
                          <h1 className='text-center'>Welcome Friend, whats your name?</h1>
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                <FontAwesomeIcon icon={faUser} className=" mt-6 ml-36 text-center  h-10 w-10 text-gray-500" />
                
                <div className="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                  {/* <button
                    type="button"
                    className="inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm"
                    onClick={() => setOpen(false)}
                  >
                    Deactivate
                  </button> */}
                  <form onSubmit={registerName} >
                    <input type="text"  className='border-2 rounded bg-slate-100  h-14 p-4 w-full mt-5 ' placeholder='Add a Todo-entry...' name="friendName" id={styles.inputTodo }/>
                    <button
                      // type="button"
                      className="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                    
                      ref={cancelButtonRef}
                    >
                      Register
                    </button>
                  </form>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition.Root>


    {/* todo modal */}
    <Transition.Root show={false} as={Fragment}>
      <Dialog as="div" className="relative z-10" initialFocus={cancelButtonRef} onClose={setShow}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
        </Transition.Child>

        <div className="fixed inset-0 z-10 overflow-y-auto">
          <div className="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
              enterTo="opacity-100 translate-y-0 sm:scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 translate-y-0 sm:scale-100"
              leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
            >
              <Dialog.Panel className="relative transform overflow-hidden flex flex-col justify-center rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                  <div className="sm:flex sm:items-start">
                    {/* <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                      <ExclamationTriangleIcon className="h-6 w-6 text-red-600" aria-hidden="true" />
                    </div> */}
                    <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                      <Dialog.Title as="h3" className="text-lg font-medium leading-6 text-gray-900">
                          Input a Title
                      </Dialog.Title>
                      <div className="mt-2">
                        <p className="text-sm text-gray-500">
                          You didnt input a title
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                {/* <FontAwesomeIcon icon={faUser} className=" mt-6 ml-36 text-center  h-10 w-10 text-gray-500" /> */}
                
                <div className="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                  <button
                    type="button"
                    className="inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm"
                    onClick={() => setOpen(!open)}
                  >
                    Deactivate 
                  </button>
                 
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition.Root>
        <main >
        <div className='bg-white w-full h-20 flex flex-row'>
          <div className="text-3xl font-semibold text-sky-600 ml-10 mt-5">
              Todo List
          </div>
          <div>

          </div>
        </div>
        <div id="body" className='w-full   flex justify-center  bg-slate-100 '>
              <style jsx>{`
                :global(.js-focus-visible) :focus:not(.focus-visible) {
                  outline: none;
                }
                input:focus {
                  background-color: white !important;
                  color: black;
                  outline:none
                }
                `}
              </style>
              <div  className='bg-white drop-shadow-md w-11/12 lg:w-5/12 mb-20 mt-20 pb-20 border-1 rounded-md flex flex-col justify-center'>
                  <h5 className='font-semibold text-4xl text-center mt-10 text-sky-600'>   Todo List </h5>
                  <div className='w-8/12  mt-5 ml-16 md:ml-28 flex flex-col rounded-md justify-center mb-10 pb-5  bg-slate-100'>
                        <div className='mt-5'>
                          <h4 className='text-center'>Hello <b>{friendName}</b>!</h4>
                          <h4 className='text-center p-2'>There are currently <b>{todoEvents.length} item(s)</b> pending on your list</h4>
                          <h4 className='text-center mt-2'>You have <b> {prioritizedEvents.length} proritized items</b></h4>
                        </div>
                  </div>
                  <form onSubmit={AddTodoEvent} className='w-8/12  mt-2 ml-16 md:ml-28  pb-7 flex flex-row justify-around' >
                        <input type="text"  className='border-2 rounded bg-slate-100  h-8 p-4 w-8/12' placeholder='Add a Todo-entry...' name="todoName" id={styles.inputTodo }/>
                        <button className='text-center flex flex-row bg-sky-600 w-3/12 pt-1.5   rounded text-white' >
                          <h2 className='ml-3 '>Add</h2>
                          <span> <FontAwesomeIcon icon={faPlus} className=" m-1 h-4 w-4 text-white" /></span>
                        </button>
                  </form>             
                  {!showTodo &&   
                    <div className='border-dashed w-8/12 ml-16 md:ml-28  flex flex-col text-center bg-white mb-10 h-32 mt-5 justify-self-center border-grey-900 border-2'>
                        <FontAwesomeIcon icon={faFaceSmile} className=" mt-3 text-gray-500" />
                        <h3 className='mt-5 text-gray-500 mb-5 pr-5 pl-5' >Hey <b> {friendName}! </b> Looks like your Todo-List is currently empty!</h3>
                    </div>
                  }
                   { todoEvents.map((item,indexNO) => 
                      <div key={indexNO} className='w-8/12 ml-16 md:ml-28  mt-3 flex flex-row text-center pr-3 bg-white pt-5 hover:p-5  pb-5 justify-self-center hover:drop-shadow-lg hover:rounded-md'>
                      <FontAwesomeIcon icon={faCircle} onClick={()=> proritizeEvent(indexNO, item)} className=" mt-4 ml-4  h-5 w-5 text-sky-500 hover:text-sky-600" />
                      <div className='flex flex-col w-7/12' >
                        <h4 className='mt-4 text-gray-500 mb-5' >  {item} </h4>
                        <div className='h-0.5 w-11/12 bg-sky-600 -mt-5 ml-3'></div>
                      </div>
                      <FontAwesomeIcon icon={faStar} onClick={()=> proritizeEvent(indexNO,item)} className=" mt-4 ml-4  h-5 w-5 text-gray-500 hover:text-gray-200" />
                      {/* <FontAwesomeIcon icon={faPenToSquare} className=" mt-4 ml-4 h-5 w-5 text-gray-500" /> */}
                      <FontAwesomeIcon icon={faTrash} onClick={()=>deleteEvent(indexNO, item)} className=" mt-4 ml-4  h-5 w-5 text-gray-500 hover:text-gray-200" />
                  </div>
                 
                   )}
            </div>
        </div>
        
        <footer className={styles.footer}>
        
        </footer>
        </main>


    </div>  </>
    )
}



export default Home

